type Query {
  history(
    page: Int
    pageSize: Int
    sort: Sort
    filter: HistoryFilter
  ): [History]
  settings: Settings
}

type Mutation {
  updateSettings(settings: SettingsInput): Settings
  triggerBuild(name: String): Boolean
}

type Subscription {
  onJobComplete: History
  updatedSettings: Settings
}

input HistoryFilter {
  id: StringFilter
  name: StringFilter
  status: NumberFilter
  details: HistoryDetailsFilter
}

input HistoryDetailsFilter {
  step: StringFilter
  output: StringFilter
  status: NumberFilter
}

input NumberFilter {
  eq: Int
  lt: Int
  gt: Int
  in: [Int]
}

input StringFilter {
  eq: String
  contains: String
  in: [String]
}

input Sort {
  field: String
  asc: Boolean
}

type History {
  id: String
  timestamp(format: String): String
  name: String
  status: Int
  details: [HistoryDetails]
}

type HistoryDetails {
  step: String
  output: String
  status: Int
  time: Int
  test: [TestSuite]
}

type TestSuite {
  tests: Int
  failures: Int
  errors: Int
  disabled: Int
  suite: [Test]
}

type Test {
  name: String
  class: String
}

type Settings {
  repositories: [Repository]
}

input SettingsInput {
  repositories: [RepositoryInput]
}

type Repository {
  id: String
  name: String
  url: String
}

input RepositoryInput {
  id: String
  name: String
  url: String
}
